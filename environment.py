"""    environment.py        A storage class for a game environment"""import sysimport euclidimport pygamefrom pygame.locals import *class env:    reflectable_line_segment_list_ = []    reflectable_circle_list_ = []        def __init__( self ):        """ add player circle """        self.reflectable_circle_list_.append( euclid.Circle( euclid.Point2(0,0), 20.0) )                # add TEMPORARY example line segments        #self.reflectable_line_segment_list_.append( euclid.LineSegment2( euclid.Point2(480,360), euclid.Point2(160,120) ) )        #self.reflectable_line_segment_list_.append( euclid.LineSegment2( euclid.Point2(600,450), euclid.Point2(120,475) ) )        #self.reflectable_line_segment_list_.append( euclid.LineSegment2( euclid.Point2(200,100), euclid.Point2(400,400) ) )                #self.reflectable_circle_list_.append( euclid.Circle( euclid.Point2(500,300), 50.0) )        #self.reflectable_circle_list_.append( euclid.Circle( euclid.Point2(440,300), 30.0) )        def draw( self, window_surface ):        for lineseg in self.reflectable_line_segment_list_:            pygame.draw.line( window_surface, (255,255,255), lineseg.p1, lineseg.p2, 2 )        for index, circle in enumerate( self.reflectable_circle_list_ ):            if not (index == 0):                """ DON'T draw the the player, game.player handles this """                pygame.draw.circle( window_surface, (255,255,255), circle.c, int(circle.r), 2 )        def clearEnvironment():        reflectable_line_segment_list_ = []        reflectable_circle_list_ = []        def addReflectableLineSegment( self, x1, y1, x2, y2 ):        self.reflectable_line_segment_list_.append( euclid.LineSegment2( euclid.Point2( x1 , y1 ), euclid.Point2( x2 , y2 ) ) )        def getLineSegment( index ):        return reflectable_line_segment_list_[ index ] # oooohh.. unsafe??        def addReflectableCircle( xpos, ypos, rad ):        self.reflectable_circle_list_.append( euclid.Circle( euclid.Point2(xpos,ypos), float(rad)) )        def getReflectableCircle( index ):        return reflectable_circle_segment_list_[ index ] # idc