"""    object_factory.py        A class that can take in a gameinfo object and spawn the appropriate game objects in the context    """import sysimport osimport mathsys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfimport pygamefrom pygame.locals import *import objectimport laserimport wallclass factory :    def __init__ ( self ) :        self.reset()    #/        def reset ( self ) :        self.enemy_list = [] # list of enemies currectly on screen        self.laser_list = [] # list of laser currently on screen        self.wall_list = [] # list of walls currently on screen        self.paused = False        self.ready = False # if the instance is ready to start creating enemies        self.started = False    #/        def setPause ( self , p ) :        self.paused = p        if self.paused == True :            pass # add code here to be executed on game pause        elif self.paused == False :            pass # add code here to be executed on game unpause    #/        def init ( self , gi , c) :        """ Sets up the object factory with respect to the gameinfo object 'gi' """        # create lasers        for laser_info in gi.laser_list :            l = laser.laser( laser_info.x , laser_info.y , laser_info.angle )            #self.laser_list.append( l )            c.addObject( l )        #/        # create walls        for wall_info in gi.wall_list :            w = wall.wall( wall_info.x1 , wall_info.y1 , wall_info.x2 , wall_info.y2 , wall_info.reflect )            #self.wall_list.append( w )            c.addObject( w )        #/    #/        def start ( self ) :        """ starts the object factory provided it has been initialised with a gameinfo object through 'init' """        if not self.ready :            return        # set the instance to have officialy 'started'        self.started = True    #/        def events ( self , event ) :        pass    #/        def tick ( self , c ) :        if not self.ready or not self.started :            return    #/        def draw ( self , wsurface ) :        """            objects will be drawn by the context,            so this method will only be used to draw other things like debug stats        """        pass    #/#/