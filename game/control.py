"""    control.py        Part of the game package. Provides an interface to control the rest of the package"""import sysimport osimport mathsys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfimport pygamefrom pygame.locals import *parentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))os.sys.path.insert(0,parentdir)from resource import TEXTURES,FONTSimport draw_serviceimport stateimport playerdef play ( level_filename ) :    """ sets the state of the package to play a level """    #state._s.s.reset()    state._s.playing = True    # load the gameinfo file    state._s.g.load( level_filename , True )    # load the level background image    TEXTURES.level_background = state._s.g.fname_texture_background    state._s.background_texture = TEXTURES.level_background    # add the player    p = player.player()    state._s.c.addObject( p )    # initialize the enemy factory    state._s.e.init( state._s.g )    state._s.e.start()#/def stop () :    """ sets the state of the package to be dormant and frees any memory used by the previous game played """    state._s.reset()#/def setPause ( p ) :    state._s.paused = p    # update context    state._s.c.setPause( p )    # update enemy factory    state._s.e.setPause( p )#/def events( event ) :    """ handles events for the game """    if not state._s.playing == True :        return    # perform context's events    state._s.c.events( event )    # perform enemy factor's events    state._s.c.events( event )#/def tick() :    """ updates the game """    if not state._s.playing == True :        return    # update the context    state._s.c.tick()    # update the enemy factory    state._s.e.tick( state._s.c )#/def draw ( wsurface ) :    """ draws the game """    if not state._s.playing == True :        return    # draw the enemy manager    state._s.e.draw( wsurface )    # queue drawing the level background    state._s.s.queueDrawCall( draw_service.draw( 0 , state._s.background_texture , 0 , 0 , None ) )    # draw the context (MUST be last!!)    state._s.c.draw( wsurface , state._s.s)#/