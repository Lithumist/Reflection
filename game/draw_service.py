"""    draw_service.py        A class that provides other classes with a way to draw things either below all objects or above all objects.    Used for level backgrounds and the HUD"""import sysimport osimport mathsys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfimport pygamefrom pygame.locals import *class draw :    """ Storage class that represents a draw call """        def __init__ ( self , depth=1 , texture=None , x=0 , y=0 , clip=None ) :        self.reset( depth , texture , x , y , clip )    #/        def reset ( self , depth , texture , x , y , clip ) :        self.depth = depth # 0 - background, 1 - foreground        self.texture = texture # reference to a pygame surface to draw        self.clip = clip # pygame rectangle to clip the texture        self.x = x        self.y = y    #/        def init ( self , depth , texture , x , y , clip=None ) :        self.reset ( depth , texture , x , y , clip )    #/    #/class service :        """ The class that draws shit """        def __init__ ( self ) :        self.reset()    #/        def reset ( self ) :        self.background_draw_call_list = [] # list of 'draw' objects that will be BELOW everything else        self.foreground_draw_call_list = [] # list of 'draw' objects that will be ABOVE everything else    #/        def queueDrawCall ( self , draw_call ) :        """ adds 'draw_call' to it's respective list """        if draw_call.depth == 0 :            self.background_draw_call_list.append( draw_call )        elif draw_call.depth == 1 :            self.foreground_draw_call_list.append( draw_call )        else :            out.pl( "Error. draw_service.service in queueDrawCall. draw call object has invalid depth '" + draw_call.depth + "'" )    #/        def drawForeground ( self , wsurface ):        """ draws foreground list and then clears it """        for call in self.foreground_draw_call_list :            wsurface.blit( call.texture , (call.x,call.y) , call.clip )        #/        self.foreground_draw_call_list = []    #/        def drawBackground ( self , wsurface ) :        """ draws background list and then clears it """        for call in self.background_draw_call_list :            wsurface.blit( call.texture , (call.x,call.y) , call.clip )        #/        self.background_draw_call_list = []    #/    #/