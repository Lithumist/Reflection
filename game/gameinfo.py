"""    gameinfo.py        Class to load gameinfo files and provide it's data in useful formats for other classes    Also contains various STORAGE classes to represents some game objects like lasers"""import sysimport osimport mathimport xml.etree.ElementTree as etsys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfclass laser:        def __init__ ( self ) :        self.reset()    #/        def reset ( self ) :        self.x = 0        self.y = 0        self.angle = 0    #/    #/class gameinfo :    def __init__ ( self ) :        self.reset()    #/        def reset ( self ) :        # general instance info        self.filename = ""        self.bad = True # shouldn't access if this flag is true ('load' method sets to false on a successful load)        # general level info        self.title = ""        # player info        self.player_x = -1        self.player_y = -1        self.player_radius = 20        # asset filenames        self.fname_texture_background = ""        # object info        self.laser_list = []    #/        def load ( self , filename , verbose = True) :        self.filename = filename        if verbose :            out.pl( "Loading level from gameinfo file '" + self.filename + "'" )        # open xml file and verify it's the correct type        tree = et.parse( self.filename )        root = tree.getroot()        if not (root.tag == "reflection_gameinfo"):            self.bad = True            if verbose:                out.pl("Error. File not Reflection gameinfo")            return False        # iterate over xml file and store data        for child1 in root :            if child1.tag == "title" :                self.title = child1.text                if verbose :                    out.pl( "title '" + self.title + "'" )            elif child1.tag == "art":                for child2 in child1 :                    if child2.tag == "bg" :                        self.fname_texture_background = child2.text                        if verbose :                            out.pl( "bg '" + self.fname_texture_background + "'" )                #end for loop/            #end elif/            elif child1.tag == "player":                for child2 in child1 :                    if child2.tag == "x1" :                        self.player_x = int( child2.text )                        if verbose :                            out.pl( "player x '" + str( self.player_x ) + "'" )                    if child2.tag == "y1" :                        self.player_y = int( child2.text )                        if verbose :                            out.pl( "player y '" + str( self.player_y ) + "'" )                    if child2.tag == "radius" :                        self.player_radius = int( child2.text )                        if verbose :                            out.pl( "player radius '" + str( self.player_radius ) + "'" )                #end for loop/            #end elif/            elif child1.tag == "laser":                l = laser                if verbose:                    out.pl("laser:")                for child2 in child1 :                    if child2.tag == "x1" :                        l.x = int( child2.text )                        if verbose :                            out.pl( "   x '" + str( l.x ) + "'" )                    if child2.tag == "y1" :                        l.y = int( child2.text )                        if verbose :                            out.pl( "   y '" + str( l.y ) + "'" )                    if child2.tag == "angle" :                        l.angle = int( child2.text )                        if verbose :                            out.pl( "   angle '" + str( l.angle ) + "'" )                #end for loop/                self.laser_list.append( l )            #end elif/        #end for loop/        # if we got this far then everything was loaded        self.bad = False        if verbose :            out.pl( "Finished loading gameinfo file" )    #end 'load' method/#end class definition/