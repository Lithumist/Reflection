"""    draw.py        methods to draw physicsworld"""import sysimport copyimport ossys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfimport pygamefrom pygame.locals import *import stateimport rayparentdir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))os.sys.path.insert(0,parentdir)import euclidfuckoff = False # is this even used???debug_draw = False# drawState()def drawState( wsurface , linecol=(255,255,255) , circlecol=(255,255,255)):    global debug_draw        for o in state.objects:        if not (o == None):            # adjust colout if hit            if o.hit == True:                linecol = (0,0,255)                circlecol = (0,0,255)            else :                linecol = (255,255,255)                circlecol = (255,255,255)            # render lines            if o.type == 0 and o.render == True:                pygame.draw.line( wsurface , linecol , (o.x1 , o.y1) , (o.x2 , o.y2) , 1 )            # render circles            if o.type == 1 and o.render == True:                pygame.draw.circle( wsurface , circlecol ,  (o.x , o.y) , int(o.radius) , 1 )        if debug_draw:        # set up pixel positions        px = 1        py = 479        for i in state.objects:            # draw the object array status            if i == None:                wsurface.set_at((px, py), (255,0,0)) # red                wsurface.set_at((px+1, py), (255,0,0)) # red            else:                wsurface.set_at((px, py), (0,255,0)) # green                wsurface.set_at((px+1, py), (0,255,0)) # green            px = px + 3# drawRaySeq()def drawRaySeq( wsurface , rs , raycol=(255,0,0)):    #import pdb; pdb.set_trace() # break point    for index, rr in enumerate(rs.ray_list):        calc = False                # get start point        start_point = copy.copy( rr.e_ray.p1 )        #import pdb; pdb.set_trace() # break point                if rr.end_point is None:            # calculate end point if ray isn't restricted            calc = True            uvec = rr.getUnitVector()            end_point = copy.copy( rr.e_ray.p1 )            end_point.x += uvec.x*1000            end_point.y += uvec.y*1000        else:            # if the ray is restricted just get it's end point            end_point = rr.end_point                # draw        pygame.draw.line( wsurface , raycol , (start_point.x,start_point.y) , (end_point.x,end_point.y) , 1 )