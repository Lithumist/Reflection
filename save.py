"""    save.py        An interface to load a save file and to access data from all 3 slots"""import sysimport osimport mathimport xml.etree.ElementTree as etsys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfimport app_constantsfrom app_constants import cwdfrom app_constants import makeRelativePath""" settings """extention = ".rsf"""" unit test flag """unittest = True""" state variables """current_slot_loaded = -1money = -1mission = -1""" clears the state (to no save file) """def clear ():    # use global variables    global current_slot_loaded    global money    global mission    # set all variables to the default    current_slot_loaded = -1    money = -1    mission = -1""" reads the specified save slots and updates the state accordingly """def load ( slot_num , verbose=False):    # use global variables    global current_slot_loaded    global money    global mission    # validate slot_num    assert( slot_num >= 1 and slot_num <= 3 )    # construct file name    filename = "saves/slot" + str(slot_num) + extention    # verbose print    if verbose:        out.pl("Loading savefile from '" + filename + "'")    # open file and verify it's type    tree = et.parse(filename)    root = tree.getroot()    if not (root.tag == "reflection_savefile"):        if verbose:            out.pl("Error. File not Reflection savefile");        return False    # traverse savefile and store all data    for child in root:        if child.tag == "money":            money = int(child.text)        if child.tag == "mission":            mission = int(child.text)    # done""" saves the current state into the specified slot (or the current slot loaded if no slot is given) """def save ( slot_num=-1 ):    # use global variables    global current_slot_loaded    global money    global mission    # validate slot (or use the current one)    if slot_num == -1:        slot_num = current_slot_loaded    else:        assert( slot_num >= 1 and slot_num <= 3 )    # generate header    head = et.Element("reflection_savefile")    # generate money    e_money = et.SubElement(head,"money")    e_money.text = str(money)    # generate mission    e_mission = et.SubElement(head,"mission")    e_mission_comment = et.Comment('the mission the player is currently on')    e_mission.append(e_mission_comment)    e_mission.text = str(mission)    # convert xml to string    savedata = "<!-- cheating is bad okay -->\n\n" + et.tostring(head)    # construct slot filename    filename = "saves/slot" + str(slot_num) + extention    # open the slot file and write the data to it (close it afterwards)    savefile = open( filename , "w" )    savefile.write(savedata)    savefile.close()""" unit test """if unittest:    money = 666    mission = 1    save(1)    money = 777    mission = 2    save(2)    money = 888    mission = 3    save(3)