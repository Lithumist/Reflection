"""    button.py        gui button class     - uses a gui.label to render button text"""import sysimport osimport mathsys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfimport pygamefrom pygame.locals import *import utilimport labelclass button:        def __init__ ( self ):        """ creates all the button's variables """        # interface        self.x = 0 # top left        self.y = 0 # top left        self.horpad = 0 # extra x padding on butons (aplied to left and right)        self.verpad = 0 # extra y padding on buttons (aplied to top and bottom)        self.font = -1        self.text = ""        self.textcolour = (255,255,255)        self.backcolour = (255,255,255)        self.hoverchange = True        # tracking        self.isdown = False        self.originalbackcolour = (255,255,255)        # internal label        self.label = -1        # button background dimensions        self.width = 0        self.height = 0        # callback variables        self.usingcallback = False        self.callback = -1        self.data1 = 0        def calculate ( self ):        """        (re)renders the button text        should be called if any main properties of the button have changed        """        # create the label        self.label = label.label()        self.label.x = self.x + self.horpad        self.label.y = self.y + self.verpad        self.label.font = self.font        self.label.text = self.text        self.label.textcolour = self.textcolour        self.label.drawback = False        self.label.wordwrap = False        # generate width and height        (self.width,self.height) = self.font.size(self.text)        self.width += self.horpad * 2        self.height += self.verpad * 2        # store the original background colour        self.originalbackcolour = self.backcolour        # render label text        self.label.update()        def update ( self ):        """ does button logic, should be called every frame """        # check weather the button has just been pressed        oldpressed = self.isdown        if oldpressed == False and self.pressed() == True:            # button has just been pushed            if self.usingcallback:                # call the registered callback function                self.callback(self.data1)        # call self.pressed to update self.isdown        self.pressed()        # make the button's background colour lighter if the mouse is hovering        # (only if this option has been set)        if self.hoverchange and self.hover() == True:            self.backcolour = util.add_uniform_to_colour( 30 , self.originalbackcolour )        else:            self.backcolour = self.originalbackcolour        def draw ( self , wsurface ):        """ draws the button """        # draw background        wsurface.fill( self.backcolour , (self.x,self.y,self.width,self.height) )        # draw text        self.label.draw( wsurface )        def pressed ( self ):        """        returns true if the button is pressed, false otherwise.        works even if update isn't being called        """        # make sure the mouse is pressed        (lpressed,rpressed,mpressed) = pygame.mouse.get_pressed()        if not lpressed:            self.isdown = False            return False        else:            # get mouse position            (mx,my) = pygame.mouse.get_pos()            if mx>=self.x and mx<=self.x+self.width and my>=self.y and my<=self.y+self.height:                self.isdown = True                return True            else:                self.isdown = False                return False    def hover ( self ):        """ returns true if the mouse is at least hovering above the button, false otherwise """        (mx,my) = pygame.mouse.get_pos()        if mx>=self.x and mx<=self.x+self.width and my>=self.y and my<=self.y+self.height:            return True        else:            return False    def register_callback ( self , func , data1=0 ):        """        sets the button to call 'func' every time the button is pressed        only the first time (not continuously whilst held down)        """        self.usingcallback = True        self.callback = func        self.data1 = data1        def unregister_callback ( self ):        """ stops the buton from calling the previously registered callback function """        self.usingcallback = False        self.callback = -1