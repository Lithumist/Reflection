"""    label.py        a gui class that displays text     - with text wrap"""import sysimport osimport mathsys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfimport pygamefrom pygame.locals import *# constants to help fit the text into the area defined# relative to sizefuck_constant_a = 0 #0.1 #2fuck_constant_b = 0 #0.3 #6fuck_constant_c = 0 #0.3 #6class label:        def __init__ ( self ):        # main interface        self.x = 0        self.y = 0        self.width = 0        self.height = 0        self.font = -1        self.fontsize = 8        self.text = ""        self.textcolour = (255,255,255)        self.backcolour = (255,255,255)        self.drawback = False        self.wordwrap = False        # character spacing        self.width_characters = 0        self.height_characters = 0        # individual lines of text to be rendered        self.textlines = []        # rendered surfaces        self.text_surfaces = []        self.background = -1        def update ( self ):        global fuck_constant_a        global fuck_constant_c        """ (re)calculate the label """        # clear old values        self.textlines = [""]        self.text_surfaces = []        # calculate the label's dimensions in terms of characters        self.width_characters = math.floor( float(self.width/(self.fontsize+fuck_constant_a*self.size)) )        self.height_characters = math.floor( float(self.height/(self.fontsize+fuck_constant_c*self.size)) )        if self.wordwrap:            # place line breaks in the text to wrap text            # doesn't break up words            cur_line_len = 0            cur_word = ""            for c in self.text:                cur_line_len += 1                if not c == " ":                    cur_word += c                else:                    if cur_line_len >= self.width_characters:                        cur_line_len = 0                        self.textlines.append("")                    self.textlines[-1] += cur_word + " "                    cur_word = ""        # pre-render the text        # render the surface(s)        for t in self.textlines:            if self.drawback:                self.text_surfaces.append( self.font.render( t , False , self.textcolour ) )            else:                self.text_surfaces.append( self.font.render( t , False , self.textcolour ) )        def draw ( self , wsurface ):        global fuck_constant_b        """ blits the pre-rendered surfaces """        if self.drawback:            # fill the background section            wsurface.fill( (0,0,255) , (self.x,self.y,self.width,self.height) )         # blit text        for i,s in enumerate(self.text_surfaces):            #import pdb; pdb.set_trace() # break point            if i >= self.height_characters:                break            wsurface.blit(s, (self.x,self.y+(i*(self.size-fuck_constant_b*self.size))))