"""    label.py        a gui class that displays text     - with text wrap"""import sysimport osimport mathsys.path.append("C:/Python27/proj/BetterConsoleFunctions/V3")import bcfout = bcfimport pygamefrom pygame.locals import *class label:        def __init__ ( self ):        # main interface        self.x = 0        self.y = 0        self.width = 0        self.height = 0        self.font = -1        self.fontsize = 8        self.text = ""        self.textcolour = (255,255,255)        self.backcolour = (255,255,255)        self.drawback = False        self.wordwrap = False        # character spacing        self.width_characters = 0        self.height_characters = 0        # individual lines of text to be rendered        self.textlines = []        # rendered text surface        self.text_surfaces = []        def update ( self ):        """ (re)calculate the label """        # clear old values        self.textlines = [""]        self.text_surfaces = []        # calculate the label's dimensions in terms of characters        self.width_characters = math.floor( float(self.width/self.fontsize) )        self.height_characters = math.floor( float(self.height/self.fontsize) )        if self.wordwrap:            # place line breaks in the text to wrap text            # doesn't break up words            cur_line_len = 0            cur_word = ""            for c in self.text:                cur_line_len += 1                if not c == " ":                    cur_word += c                else:                    if cur_line_len > self.width_characters:                        cur_line_len = 0                        self.textlines.append("")                    self.textlines[-1] += cur_word + " "                    cur_word = ""        # pre-render the text        # render the surface(s)        for t in self.textlines:            if self.drawback:                self.text_surfaces.append( self.font.render( t , False , self.textcolour , self.backcolour) )            else:                self.text_surfaces.append( self.font.render( t , False , self.textcolour ) )        # FIXME -> add colour keying to make transparency        # FIXME -> actually draw a background rectangle        def draw ( self , wsurface ):        """ blits the pre-rendered surfaces """        # FIXME -> blit background rectangle if any        # blit text        for i,s in enumerate(self.text_surfaces):            wsurface.blit(s, (self.x,self.y+(i*self.size)))